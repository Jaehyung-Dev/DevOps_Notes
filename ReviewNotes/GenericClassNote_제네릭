// 제네릭클래스 선언
// 클래스 이름 뒤에 <타입매개변수(T)>를 붙여준다.
// 제네릭으로 선언된 클래스는 객체를 생성할 때 타입매개변수의 타입을 지정한다.
// public class 클래스명<T> { ... }
public class Box<T> {

// T 타입의 변수 선언 -> T 타입 변수도 객체가 생성될 때 지정된 제네릭 타입에 따라 타입이 변경된다.
private T t1;
private T t2;

public Box() {

}
public Box(T t1, T t2) {
    this.t1 = t1;
    this.t2 = t2;
}

public void setT1() {
    this.t1 = t1;
}
public T getT1() {
    return this.t1;
}
public void setT2() {
    this.t2 = t2;
}
public T getT2() {
    return this.t2;
}
-----------------------------------------------------------
// 제네릭클래스 사용
// 제네릭클래스명<타입매개변수> 변수명 = new 클래스명<>(매개변수);
Box<String> strBox = new Box<>("Java", "17"); // 제네릭클래스인 Box의 타입매개변수를 String으로 지정 -> 자동으로 매개변수도 String
-----------------------------------------------------------------------------------------------------------------------------
// 제네릭메소드 정의
// 리턴타입 앞에 <T>타입 매개변수를 붙여서 리턴타입이나 매개변수의 타입이 열려있는 메소드를 정의
// 제네릭메소드의 타입도 메소드가 호출될때 전달되는 매개변수 타입에 따라 지정된다.
// 접근제어자 static <T> T 메소드명(매개변수) { ... }
public static <T> T getLastElement(T[] tArr) {
    return tArr[tArr.length -1]; // 배열의 길이 -1 == 인덱스의 마지막에 있는 요소 반환
}
// 제네릭메소드 사용
String[] strArr = {"java", "db", "javascript", "html"}; // String 타입 배열 생성
System.out.println("strArr의 마지막 요소는 " + getLastElement(strArr)); // 제네릭메소드에 String 배열 추가
                                                                       // 인덱스 마지막요소 html 출력
// Map 제네릭메소드
// Map의 key, value를 모두 제네릭 타입으로 설정하고 싶을 때는 <K, V> 제네릭을 사용한다.
public static <K, V> int getSumMap(Map<K, V> map) {
	int sum = 0;

	for(V v : map.values()) { // map의 value값을 v에 하나씩 넣어주고
		sum += (int)v; // v값을 int로 형변환 해서 sum에 넣어준다
	}
	return sum;
}

// Map 제네릭메소드 사용
Map<String, Integer> map = new HashMap<>();		
map.put("a", 8);
map.put("b", 12);
System.out.println(getSumMap(map)); // 20 출력
-----------------------------------------------------------------------------------------------------------------------------
// 와일드카드<?>는 타입매개변수를 지정하지 않고 바로 사용가능한 제네릭 타입이다.
// 제네릭클래스에서는 사용할 수 없고 제네릭메소드의 리턴타입이나 매개변수에 사용한다.
// 와일드카드는 타입매개변수와는 다르게 단독으로는 사용이 불가 - 서브클래스 타입으로 사용
// 와일드카드<?> 메소드 선언
public static int getSumList(List<?> wildCardList) {
int sum = 0;		
  for(int i = 0; i < wildCardList.size(); i++) {
	  sum += (int)wildCardList.get(i); // List의 값을 int로 형변환하여 sum에 담고 sum 리턴
  }
  return sum;
}
// 와일드카드<?> 메소드 사용
List<Integer> intList = new ArrayList<>();	
intList.add(1);
intList.add(2);
System.out.println(getSumList(intList)); // 3 출력

// 와일드카드<?>와 제네릭 타입매개변수<T, K, V, E, ...>의 차이점]]
// 와일드카드는 제네릭 메소드(매개변수, 리턴타입)에만 사용가능하고
// 제네릭 타입매개변수<T, K, V,r,...>는 제네릭 클래스와 제네릭 메소드에 모두 사용가능하다.
// 제네릭 타입매개변수<T, K, V, E, ...>는 메소드의 정의부나 클래스의 정의부에 타입매개변수를
// 항상 지정해야 하지만 와일드카드<?> 타입매개변수를 지정안해도 된다.
// 제네릭 타입매개변수<T, K, V, E, ...>는 단독으로 사용가능
// (타입매개변수 타입의 변수선언, 리턴타입, 매개변수)
// 와일드카드는 단독으로 사용할 수 없고 제네릭클래스의 서브클래스 타입으로만 지정가능하다.
// 와일드카드는 제네릭클래스의 확장성을 한 단계 더 높여서 사용을 더 유연하게 해주는 기능을 한다.
public static List<?> copyList(List<?> wildCardList) {
	List<Integer> returnList = new ArrayList<>();
	List<Map<String, String>> mapList = new ArrayList<>();
		
	// 와일드카드는 향상된 for문 사용이 불가능
	for(int i = 0; i < wildCardList.size(); i++) {
		returnList.add((int)wildCardList.get(i));
	}
	return returnList;
}
