    // 1. String 객체 생성
		String str1 = "bitcamp"; // String str1 = new String("bitcamp"); 와 같다.
		String str2 = new String("bitcamp");
		String str3 = new String(new char[] {'b', 'i', 't', 'c', 'a', 'm', 'p'});
		
		// 2. String은 불변성을 가지고 있어서 값을 변경했을 때
		// 메모리에 저장된 문자열 값을 직접 변경하지 않고
		// 새로운 문자열을 메모리에 새로 저장한다.
		System.out.println(str1.hashCode()); // hashCode는 객체의 해시코드을 나타내주는 것으로 같은 객체인지 구분 가능
		str1 = "naver";
		System.out.println(str1.hashCode()); 
		str1 = "cloud";
		System.out.println(str1.hashCode()); // 같은 str1인데도 불변성으로 다른 해시코드 값 출력
		
		// 3. == 주소가 같은 객체인지 확인
		if(str2 == str3) {
			System.out.println("같은 객체입니다.");
		} else {
			System.out.println("다른 객체입니다."); // 다른 객체 출력
		}
		
		// 4. 같은 문자열인지를 비교할 때는 equals 메소드 사용
		// String의 equals 메소드는 Object의 equals 메소드를 오버라이드해서 새롭게 구현한 메소드
		if(str2.equals(str3)) {
			System.out.println("같은 문자열입니다."); // 같은 문자열 출력
		} else {
			System.out.println("다른 문자열입니다.");
		}
		
		// equalsIgnorecase : 대소문자 구분없이 문자열값 비교
		String str5 = "abcde";
		String str6 = "ABCDE";
		
		if(str5.equals(str6)) {
			System.out.println("같습니다.");
		} else {
			System.out.println("다릅니다."); // 다릅니다 출력
		}
		
		if(str5.equalsIgnoreCase(str6)) {
			System.out.println("같습니다."); // 같습니다 출력
		} else {
			System.out.println("다릅니다.");
		}
		
		// 5. compareTo : 문자열이 같은지 비교해주는 메소드
		// 같으면 0, 다르면 객체의 사전적 순서를 비교해서 1, -1을 리턴한다.
		System.out.println(str2.compareTo(str3)); // 0 출력
		System.out.println(str2.compareTo(str1)); // str2가 str1 보다 사전 순서로 앞 -1 출력
		
		// 6. concat : 문자열을 합쳐서 새로운 문자열을 리턴하는 메소드
		String str4 = "cloud";
		str1 = "naver";
	
		String newStr = str1.concat(str4);
		System.out.println(newStr); // navercloud 출력
----------------------------------------------------------
    String str1 = "computer";
		String str2 = "smartPhone";
		//String은 공백(space)도 index로 인식하여 처리
		String str3 = "abcdha bcdeba"; 

		// 7. contains : 문자열을 포함하는지 여부를 검사하는 메소드
		// 포함하고 있으면 true, 포함하지 않으면 false를 리턴한다.
		System.out.println(str2.contains("tP")); // true 출력
		System.out.println(str3.contains("tP")); // false 출력
		
		// 8. indexOf, lastIndexOf : 특정 문자나 문자열의 index를 리턴하는 메소드
		// 포함되어 있으면 해당 문자의 인덱스 리턴, 포함되어 있지 않으면 -1 리턴
		// indexOf는 왼쪽에서 오른쪽으로 검사
		// lastIndexOf는 오른쪽에서 왼쪽으로 검사
		System.out.println("str2에서 h의 index는 " + str2.indexOf('h')); // 6출력
		System.out.println("str3에서 a의 index는 " + str3.indexOf('a')); // 0출력
		System.out.println("str3에서 index 4부터 a의 index는 " + str3.indexOf('a', 4)); // 인덱스 4이후의 a의 값이므로 5출력
		
		System.out.println("str3에서 abc의 index는 " + str3.indexOf("abc")); // 0출력
		System.out.println("str2에서 abc의 index는 " + str2.indexOf("abc")); // 없어서 -1 출력
		
		System.out.println("str3에서 마지막 h의 index는 " + str3.lastIndexOf('b')); // 11출력
		System.out.println("str3에서 마지막 bc의 index는 " + str3.lastIndexOf("bc")); // 7출력 
		
		// 9. length : 문자열의 길이를 리턴하는 메소드
		System.out.println("str3의 길이는 " + str3.length()); // 13출력
		
		// 배열에서는 length가 메소드가 아니고 속성 값(멤버변수)이다.
		int[] intArr = new int[100];
		System.out.println("intArr의 길이는 " + intArr.length); // 100출력
		
		// List의 길이는 size 메소드를 사용한다.
		List<Integer> intList = new ArrayList<>();
		intList.add(1);
		intList.add(2);
		intList.add(3);
		
		System.out.println("intList의 길이는 " + intList.size()); // 3출력
		
		// 10. replace, replaceAll : 문자열에서 주어진 첫 번째 매개변수를 찾아서 두 번째 매개변수로
		// 치환하는 메소드, replace와 replaceAll의 차이는 replaceAll은 정규표현식을 매개변수로
		// 전달할 수 있다는 점이다.
		String str4 = "abcabcabcaabbcc";
		
		System.out.println(str4.replace("abc", "111")); // 111111111aabbcc출력
		
		System.out.println(str4.replaceAll("abc", "111")); // 111111111aabbcc출력
		
		// replaceAll에서 정규표현식 사용
		// str4에 있는 a, c를 2로 치환해라
		System.out.println(str4.replaceAll("[ac]", "2")); // 2b22b22b222bb22 출력
		
		// 11. 체이닝 기법
		// 메소드를 체인처럼 엮어서 사용하는 것을 체이닝기법이라 한다.
		// 사용한 메소드의 리턴타입에 따라서 엮어서 사용할 수 있는 메소드들이 달라진다.
		System.out.println(str4.replace('a', '1') // 1bc1bc1bc11bbcc
				.concat("abcabc") // 1bc1bc1bc11bbccabcabc
				.replace('b', '2') // 12c12c12c1122cca2ca2c
				.toUpperCase() // 12C12C12C1122CCA2CA2C
				);
------------------------------------------------------------------------------------
    String str1 = "bit-naver-cloud";
		String str2 = "kiaCar";
		String str3 = "aBcDeF";
		
		int num1 = 1234;
		double num2 = 1234.5678;
		boolean a = true;
		
		// 12. split : 매개변수로 주어진 문자열로 기존 문자열을 분리해서 문자열 배열로 리턴
		String[] strArr = str1.split("-"); // {"bit", "naver", "cloud"}
		
		for(String s : strArr) {
			System.out.println(s); // bit \ naver \ cloud 출력
		}
		
		// 13. substring : 주어진 인덱스로 잘려진 문자열을 리턴
		// 매개변수가 하나일 떄는 주어진 매개변수부터 마지막 인덱스의 문자까지 잘라진 문자열 리턴
		System.out.println(str2.substring(4)); // ar출력
		
		// 매개변수가 두 개일 때는 첫 번쨰 매개변수부터 두 번째 매개변수의 인덱스까지의 문자열을 잘라서 리턴
		// 두 번째 매개변수의 인덱스 문자는 포함하지 않는다.
		System.out.println(str2.substring(2, 4)); // aC출력
		
		// 14. toLowerCase : 영문자를 모두 소문자로 변환하여 리턴
		//	   toUpperCase : 영문자를 모두 대문자로 변환하여 리턴
		System.out.println(str3.toLowerCase());
		System.out.println(str3.toUpperCase());
		
		// 15. trim : 문자열 앞뒤의 공백을 모두 제거하여 리턴하는 메소드(공백의 크기 상관없이 모두 제거)
		// 			      중간에 포함되어 있는 공백은 제거하지 못한다.
		String str4 = "       aa  bb    cc     ";
		System.out.println(str4.trim()); // aa  bb    cc출력
		
		// 16. valueOf : 다른 타입의 값을 String 타입으로 변경
		// valueOf는 static 메소드라 String.valueOf로 사용한다.
		System.out.println(String.valueOf(num1).getClass().getSimpleName()); 
		System.out.println(String.valueOf(a).getClass().getSimpleName());
		System.out.println(String.valueOf(num2).getClass().getSimpleName()); // 모두 String 출력
