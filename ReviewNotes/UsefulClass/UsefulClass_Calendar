// 1. Calendar 객체 생성
// Calendar 클래스의 static 메소드인 getInstance()를 이용해서 객체를 생성한다.
// getInstance()를 통해 생성되는 객체는 Calendar를 상속받아 구현된
// GregrianCalendar 클래스이다.
Calendar calendar = Calendar.getInstance(); // 시스템의 현재 날짜와 시간을 가지고 있는 객체
		
// 2. 시간표시
// HOUR(0 ~ 11로 시간 단위 표시) 
// HOUR_OF_DAY(0 ~ 23로 시간 단위 표시)
// MINUTE(0 ~ 59로 분 단위 표시)
// SECOND(0 ~ 59로 초 단위 표시)
System.out.println(calendar.get(Calendar.HOUR));
System.out.println("현재 시간은 " +
	calendar.get(Calendar.HOUR_OF_DAY) + ":" +
	calendar.get(Calendar.MINUTE) + ":" +
	calendar.get(Calendar.SECOND)
);
		
// 3. 오전, 오후표시
// AM_PM(오전이면 0, 오후는 1)
System.out.println(calendar.get(Calendar.AM_PM) == 0 ? "오전입니다." : "오후입니다.");
		
// 4. 년월일 표시
// YEAR(현재 년도를 네자리로 표시)
// MONTH(1월 ~ 12월을 0 ~ 11로 표시)
// WEEK_OF_YEAR(올해의 몇 번째 주 인지 표시)
// WEEK_OF_MONTH(이번 달의 몇 번째 주 인지 표시)
// DAY_OF_WEEK(일요일 ~ 토요일을 1 ~ 7로 표시)
// DATE(현재 날짜의 일자 표시)
System.out.println("현재 날짜는 " + 
	calendar.get(Calendar.YEAR) + "-" +
	((calendar.get(Calendar.MONTH) + 1) < 10 ? "0" + (calendar.get(Calendar.MONTH)+1) : (calendar.get(Calendar.MONTH) +1)) + "-" +
	calendar.get(Calendar.DATE)
);
		
System.out.println("올해의 몇 째 주 : " + calendar.get(Calendar.WEEK_OF_YEAR));
System.out.println("이번 달의 몇 째 주 : " + calendar.get(Calendar.WEEK_OF_MONTH));
		
// Calendar.DAY_OF_WEEK   1       2		  3		  4 	  5	 	  6 	  7
String[] dayArr = {"", "일요일", "월요일", "화요일", "수요일", "목요일", "금요일", "토요일"};
		
System.out.println("오늘은 " + dayArr[calendar.get(Calendar.DAY_OF_WEEK)]);
		
// 5. Calendar 객체에 다른 날짜 설정하기
// Calendar 객체의 set 메소드를 통해서 날짜를 변경할 수 있다.
// set 메소드는 Calendar 객체가 생성된 후에 사용가능하다.
Calendar oneDay = Calendar.getInstance();
oneDay.set(2024, 3, 24, 22, 53, 30); // 2024년 4월 24일 오후 10시 53분 30초를 갖는 Calendar 객체
		
System.out.println(DateToString(oneDay) + " " + TimeToString(oneDay));
}
---------------------------------------------다른 날짜 차이 연산----------------------------------------------------
Calendar cal1 = Calendar.getInstance();
Calendar cal2 = Calendar.getInstance();
cal2.set(2019, 2, 11);
		
// getTimeInMills() : 현재 날짜 시간을 밀리세컨드로 변환(long)
// 두 날짜의 차이 = 날짜1.getTimeInMills() - 날짜2.getTimeInMills() (long) 밀리세컨드
long diff = cal1.getTimeInMillis() - cal2.getTimeInMillis();
		
System.out.println("cal2부터 cal1까지 " + (diff / 1000) + "초가 지났습니다.");
System.out.println("cal2부터 cal1까지 " + (diff / 1000 / 60) + "분이 지났습니다.");
System.out.println("cal2부터 cal1까지 " + (diff / 1000 / 60 / 60) + "시간이 지났습니다.");
System.out.println("cal2부터 cal1까지 " + (diff / 1000 / 60 / 60 / 24) + "일이 지났습니다.");
System.out.println("cal2부터 cal1까지 " + (diff / 1000 / 60 / 60 / 24 / 30) + "개월 지났습니다.");
System.out.println("cal2부터 cal1까지 " + (diff / 1000 / 60 / 60 / 24 / 30 / 12) + "년 지났습니다.");
-------------------------------------------- Date <-> Calendar 변환 -----------------------------------------------------
Calendar cal = Calendar.getInstance();
cal.set(2018, 6, 7);
		
// 1. Calendar 객체를 Date 객체로 변환
// Date 생성자에 매개변수로 Calendar 객체의 getTimeInMills() 메소드를 전달
Date date = new Date(cal.getTimeInMillis());
		
// 2. Date 객체를 Calendar 객체로 변환
Calendar cal2 = Calendar.getInstance();
		
// Calendar 객체의 setTime메소드의 매개변수로 Date 객체 전달
cal2.setTime(date);
		
// 3. Date, Calendar 객체는 toString이 오버라이드 되어있다.
System.out.println(date); // Sat Jul 07 16:58:12 GMT+09:00 2018
System.out.println(cal2); 
-------------------------------------------- calendar 연산 -----------------------------------------------------	
public static void main(String[] args) {
// 1. add메소드 : Calendar 객체에 날짜를 더해주는 메소드
// add메소드(더해줄 위치(Calendar.YEAR, Calendar.MONTH, Calendar.DATE), 더할 날짜)
// add메소드는 다음 단위에도 영향을 준다.
Calendar calendar = Calendar.getInstance();
		
calendar.add(Calendar.DATE, 5);
printCalendar(calendar); // 2024년 5월 17일
		
calendar.add(Calendar.DATE, 30);
printCalendar(calendar); // 2024년 6월 16일
		
calendar.add(Calendar.YEAR, 3);
calendar.add(Calendar.MONTH, 5);
printCalendar(calendar); // 2027년 11월 16일
		
// 2. roll메소드
// roll메소드도 add메소드와 마찬가지로 날자를 더해주는 메소드인데
// roll메소드는 다음 단위에 영향을 미치지 않는다.
calendar.roll(Calendar.DATE, 31);
printCalendar(calendar); // 2027년 11월 17일
		
}
public static void printCalendar(Calendar cal) {
	System.out.println(cal.get(Calendar.YEAR) + "년 " +
		(cal.get(Calendar.MONTH) + 1) + "월 " +
		cal.get(Calendar.DATE) + "일"
		);
}
-----------------------------------------------SimpleDateFormat------------------------------------------------
// Date나 Calendar를 포맷에 맞춰 출력할 때 SimpleDateFormat 클래스를 사용한다.
    
Date today = new Date();
// 1. SimpleDateFormat 객체 생성
// SimpleDateFormat 객체를 생성할 때 생성자의 매개변수로 지정할 날짜 포맷을 전달한다.
SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat("yy년 MM월 dd일");
SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
// 2. format 메소드
// format 메소드를 통해서 Date객체의 날짜 데이터를 SimpleDateFormat 객체에
// 지정한 형식으로 변경할 수 있다. 리턴 값은 String 타입이고 String으로 값이 리턴되기 때문에
// 날짜연산은 불가능하다.
System.out.println(today); // Sun May 12 16:56:04 GMT+09:00 2024
System.out.println(simpleDateFormat1.format(today)); // 24년 05월 12일
System.out.println(simpleDateFormat2.format(today)); // 2024-05-12 16:56:04
-------------------------------------------------LocalDateTime--------------------------------------------------
// 1. LocalDateTime 객체 생성
// 1-1. LocalDate. LocalTime 객체를 이용한 객체생성
LocalDate localDate = LocalDate.now();
LocalTime localTime = LocalTime.now();
		
LocalDateTime localDateTime1 = LocalDateTime.of(localDate, localTime);
		
// 1-2. 원하는 날짜 값을 입력하여 객체 생성
// Calendar와 달리 월에 -1을 안해줘도 된다.
LocalDateTime localDateTime2 = LocalDateTime.of(2024, 3, 24, 11, 11, 23);
		
// 1-3. LocalDate.atTime 메소드와 LocalTime.atDate 메소드를 사용하여 객체 생성
LocalDateTime localDateTime3 = localDate.atTime(localTime);
LocalDateTime localDateTime4 = localTime.atDate(localDate);
		
System.out.println(localDateTime1); // 2024-05-12T16:53:48.372315900
System.out.println(localDateTime2); // 2024-03-24T11:11:23
System.out.println(localDateTime3); // 2024-05-12T16:53:48.372315900
System.out.println(localDateTime4); // 2024-05-12T16:53:48.372315900
		
// 1-4. 현재 날짜와 시간을 갖는 객체 생성
LocalDateTime localDateTime5 = LocalDateTime.now();
System.out.println(localDateTime5); // 2024-05-12T16:53:48.373359700
--------------------------------------------------ZonedDateTime--------------------------------------------------
LocalDateTime localDateTime = LocalDateTime.now();
		
// 1. ZoneId 객체 생성
// of 메소드를 통해서 객체를 생성한다.
ZoneId zoneId1 = ZoneId.of("Asia/Seoul");
ZoneId zoneId2 = ZoneId.of("Europe/Paris");
		
// 2. LocalDateTime 객체의 atZone 메소드를 통해 ZoneId가 추가된
// ZonedDateTime 객체 생성
ZonedDateTime zonedDateTime1 = localDateTime.atZone(zoneId1);
ZonedDateTime zonedDateTime2 = localDateTime.atZone(zoneId2);
		
System.out.println(localDateTime); // 2024-05-12T16:49:59.710919300
System.out.println(zonedDateTime1); // 2024-05-12T16:49:59.710919300+09:00[Asia/Seoul]
System.out.println(zonedDateTime2); // 2024-05-12T16:49:59.710919300+02:00[Europe/Paris]
		
System.out.println(zoneId1); // Asia/Seoul
System.out.println(zoneId2); // Europe/Paris
		
// 3. ZonedDateTime 객체에서 ZoneId 추출
System.out.println(zonedDateTime1.getZone()); // Asia/Seoul
		
// 4. 현재 날짜와 시간을 갖는 ZonedDateTime 객체 생성
ZonedDateTime zonedDateTime3 = ZonedDateTime.now(); 
		
// withZoneSameInstant(ZoneId 객체)
// ZonedDateTime 객체 생성하면서 Zone을 지정
ZonedDateTime zonedDateTime4 = ZonedDateTime.now().withZoneSameInstant(zoneId2);
		
System.out.println(zonedDateTime3); // 2024-05-12T16:52:12.561899+09:00[GMT+09:00]
System.out.println(zonedDateTime3.getZone()); // GMT+09:00
System.out.println(zonedDateTime4); // 2024-05-12T09:52:12.561899+02:00[Europe/Paris]
System.out.println(zonedDateTime4.getZone()); // Europe/Paris
