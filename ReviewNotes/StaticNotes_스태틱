	* 인스턴스,클래스 변수 와 인스턴스, 클래스메소드가 선언된 CarStatic 클래스 만들기* 
  	// 1. 인스턴스 변수 선언
	// 인스턴스 변수는 객체가 생성된 후에 사용 가능한 변수 
	public String company;
	public String model;
	public String color;
	public int price;
	
	// 2. 클래스 변수 선언(static 변수)
	// 클래스 변수는 컴파일러가 클래스를 읽으면서 메모리(static 영역)에 바로 저장되어 객체 생성없이 사용 가능
	public static String grade;
	
	// 3. 인스턴스 메소드 선언
	// 인스턴스 메소드도 컴파일러가 클래스를 읽으면서 메모리(static 영역(메소드 영역))에 저장되지만 
	// 객체가 생성되지 않으면 메소드를 사용하지 못하게 막는다.
	// 그리고 객체들이 생성되면 각각의 객체가 메소드를 각각 생성하는 것이 아니고 
	// static 영역에 생성된 메소드를 참조해서 사용한다.
	public void carInfo() {
		System.out.println("제조사 : " + this.company);
		System.out.println("모델 : " + this.model);
		System.out.println("색상 : " + this.color);
		System.out.println("가격 : " + this.price);
	}
	
	// 4. 클래스 메소드(static 메소드)
	public static void printCurrentGrade() {
		System.out.println("현재 등금 : " + grade);
	}
-----------------------------------------------------------------------------------------------------------------
	// CarStatic 클래스 사용
	public static void main(String[] args) {
	// 1. 클래스 변수와 메소드의 사용
	// 클래스 변수와 메소드는 클래스명.변수, 클래스명.메소드 형태로 접근한다.
	CarStatic.grade = "B";
	CarStatic.printCurrentGrade();
		
	// 2. 인스턴스 변수나 메소드는 클래스원형으로는 접근 및 사용이 불가능하다.
	CarStatic.company = "현대"; // 오류
	CarStatic.model = "제네시스"; // 오류
	CarStatic.carInfo(); // 오류
		
	// 3.인스턴스 변수와 메소드는 객체 생성 후에 사용한다.
	CarStatic car = new CarStatic();
	car.company = "현대";
	car.model = "제네시스";
	car.color = "검정";
	car.price = 5000;
	car.carInfo();
	}
