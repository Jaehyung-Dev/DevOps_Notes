// try ~ catch ~ finally 사용
  public static void main(String[] args) {
 	// 사용할 변수들 선언
    	int[] intArr = new int[3];
	String[] strArr = new String[3];	
	int idx = 0;
		
	// 1. try ~ catch ~ finally
	// try 블록에 실행될 코드를 작성하고 try 블록에 작성된 코드에서 에러가 발생하면
	// catch 블록으로 이동해서 예외처리를 한다.
	// finally 블록은 예외가 발생하던 발생하지 않던 무조건 실행되는 블록이다.
	// try ~ catch 블록은 항상 같이 작성해줘야 되며
	// finally 블록은 개발자의 선택사항이다.
	while(true) {
		try {
			// 2. ArrayIndexOutOfBoundsException 발생
			System.out.println(intArr[idx++]); // 무한 ++로 ArrayIndexOutOfBoundsException 오류 발생
				
			// 3. ArithmeticException 발생
			int result = 10 / 0; // 분모가 0인 나누기 시 ArithmeticException 오류 발생
				
			// 4. NullPointerException 발생
			strArr[0].length(); // strArr[0]에 값이 없어 NullPointerException 오류 발생

		} catch(ArrayIndexOutOfBoundsException ae) {
			System.out.println(ae.getMessage()); // 발생한 예외의 메시지 출력
			System.out.println("인덱스의 범위를 초과했습니다.");

		} catch(ArithmeticException are) {
			System.out.println(are.getMessage()); // 발생한 예외의 메시지 출력
			System.out.println("분모는 0이 될 수 없습니다.");
			break;

		} catch(NullPointerException ne) {
			System.out.println(ne.getMessage()); // 발생한 예외의 메시지 출력
			System.out.println("null에는 속성이나 기능이 존재하지 않습니다.");
			break;

		} catch(Exception e) {
			System.out.println(e.getMessage()); // 발생한 예외의 메시지 출력
			System.out.println("인덱스의 범위를 초과했습니다.");
			break;
      		// finally 코드는 무조건 실행
		} finally {
			if(idx <= 3) {
				System.out.println("정상출력");
			} else {
				System.out.println("예외발생. idx를 0으로 초기화합니다.");
				idx = 0;
			}
		}
	}
}
---------------------------------------------------------------------------------------------
// throws 사용
  // throws는 해당 메소드가 호출되는 곳에 예외처리를 위임하는 것이다.
	// 메소드를 호출하는 곳에서 try ~ catch 구문으로 예외처리를 하던가
	// 아니면 다시 한 번 throws로 예외처리를 위임할 수 있다.
	// throws의 위치는 매개변수의 소괄호 뒤, { 앞에 작성한다.
public static void main(String[] args) {
		
	Scanner sc = new Scanner(System.in);
		
	System.out.println("아이디를 입력하세요.");
	String userId = sc.nextLine();
	System.out.println("비밀번호를 입력하세요.");
	String userPw = sc.nextLine();
		
	try {
		checkUserIdAndUserPw(userId, userPw);
	} catch(Exception e) {
		if(e.getMessage().equalsIgnoreCase("id not exist")) { // throw로 던진 예외를 활용해서 처리
			System.out.println("에러코드 : 201");
			System.out.println("존재하지 않는 아이디입니다.");
		} else if(e.getMessage().equalsIgnoreCase("pw not correct")) { // throw로 던진 예외를 활용해서 처리
			System.out.println("에러코드 : 202");
			System.out.println("잘못된 비밀번호입니다.");
		} else {
			System.out.println(e.getMessage());
			System.out.println("알 수 없는 에러 발생");
		}
	}
}
public static void checkUserIdAndUserPw(String userId, String userPw) {
	String dbUserId = "bit";
	String dbUserPw = "1111";
		
	if(!userId.equals(dbUserId)) {
		// throw를 통해 예외 발생시키기
		// throw new 예외클래스(getMessage메소드에서 표출할 메시지)
		throw new RuntimeException("id not exist");
	}
	if(!userPw.equals(dbUserPw)) {
		throw new RuntimeException("pw not correct");
	}
	System.out.println(userId + "님 환영합니다.");
}
---------------------------------------------------------------------------------------------
// CheckedException(IOException) 
  public static void main(String[] args) {
	BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	int age = 0;
		
	// IOException은 checkedException으로 무조건 예외처리 코드를 작성해야 한다.
	// readLine 메소드의 정의로 이동해보면 
    public String readLine() throws IOException { // readLine 메소드 정의부
            return readLine(false, null);
        }
   	// throws 구문으로 IOException을 던지고 있기 때문에
	// readLine 메소드를 호출하는 곳에서 IOException에 대한 예외처리를 해야한다.
	// 아래와 같이 try catch를 사용하거나 메소드를 호출하는 곳에 throws구문으로 예외처리를 위임(안좋은방법)
	try {
		age = Integer.parseInt(in.readLine());
	} catch(IOException ie) {
			
	}	
}
