// List는 인터페이스이므로 객체를 생성할 수 없다.
// List를 생성할 때는 제네릭 타입의 엘레먼트 타입을 지정해야하는데
// 지정하지 않는다면 자동으로 Object가 붙는다.
// 엘레먼트의 타입이 Object로 생성된 List는 모든 타입의 값 저장 가능
List list1 = new ArrayList();
List<Object> list2 = new ArrayList<>();

// 제네릭 타입에는 기본타입을 지정할 수 없다.
List<int> intList = new ArrayList<>(); // int 기본타입으로 에러 발생

// subList : 매개변수로 전달된 시작 인덱스부터 끝 인덱스까지의 데이터를 잘라서 새로운 리스트로 리턴
intList1.subList(1, 4); // intList1에서 인덱스 1부터 인덱스 4 전까지 잘라라

// 정렬
Collection.sort(리스트명);
Collection.sort(intList1); // 예시

// 포함여부
// 1.contains(Object o) : 매개변수로 전달된 객체가 목록에 존재하는지 확인
System.out.println(intList1.contains(11)); // 11이라는 객체가 리스트에 존재하면 true, 아니면 false 반환
// 2.containsAll(Collection c) : 매개변수로 전달된 Collection 객체가 모두 포함되는지 확인
System.out.println(intList1.containsAll(intList2)); // intList2 가 intList1에 모두 포함되는지 확인

// 데이터추가
// 1.add(E e) : 매개변수로 전달받은 e를 목록의 마지막에 추가
// 리스트명.add(넣을 객체);
// intList2.add(10); // intList2 목록의 마지막에 10을 추가
// 2.addAll(Collection c) : 매개변수로 전달받은 Collection 객체의 데이터를 목록 마지막에 모두 추가
// 리스트명.addAll(넣을 Collection타입 객체);
// intList2.addAll(intList1); // intList2에 intList1의 데이터를 모두 추가

// 특정 index의 데이터 수정
// set(int index, E e) : 매개변수로 전달받은 index에 위치한 데이터를 e로 수정
// 리스트명.set(변경할 데이터의 인덱스, 변경할 값);
// intList1.set(1, 1000); // intList1에 1번 인덱스의 데이터를 1000으로 수정

// 리스트에 저장된 데이터의 개수 확인
// 리스트명.size();
// intList1.size(); // intList1에 있는 데이터의 개수 확
