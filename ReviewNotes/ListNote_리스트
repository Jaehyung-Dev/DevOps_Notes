// 1. List 객체 생성
// List는 인터페이스라 객체를 생성할 수 없고 
// List를 상속받아 구현된 ArrayList, LinkedList 등의 객체를 사용한다.
// List를 생성할 때는 제네릭 타입의 엘레먼트의 타입을 지정해야하는데
// 타입을 지정하지 않고 List를 생성하면 엘레먼트의 타입이 자동으로 Object로 지정된다.
List list1 = new ArrayList();
List<Object> list2 = new ArrayList<>();
		
// 엘레먼트의 타입이 Object로 지정되었기 때문에
// 모든 타입의 값을 저장할 수 있는 List가 된다.
list1.add(1);
list1.add("aaa");
list1.add(new Car());
list1.add(new ArrayList());
		
// 2. Java 17버전 이전에서는 ArrayList 생성자에서도 엘레먼트의 제네릭타입을 지정해야 됐지만
// Java 17버전부터는 제네릭 타입을 명시하지 않아도 된다.
// 자바 17버전
List<String> strList = new ArrayList<>();
// 자바 17 이전 버전
List<String> strList2 = new ArrayList<String>();
		
// 3. 제네릭 타입에 기본타입은 지정할 수 없다.
List<int> intList = new ArrayList<>(); // 제네릭타입이 int이므로 오류 발생
		
// 4. subList: 매개변수로 전달된 시작 인덱스부터 끝 인덱스까지의 데이터를 잘라서 새로운 리스트로 리턴
List<Integer> intList1 = new ArrayList<>();
		
intList1.add(4);
intList1.add(5);
intList1.add(3);
intList1.add(1);
intList1.add(2);
		
List<Integer> intList2 = new ArrayList<>(intList1.subList(1, 4));
		
System.out.println(intList1); // [4, 5, 3, 1, 2]
System.out.println(intList2); // [5, 3, 1]
		
// 3. 정렬
// Collections.sort(Collection c) 메소드 사용
// sort 메소드는 static으로 선언되어 있어서 Collections 클래스에서 바로 사용한다.
Collections.sort(intList1);
Collections.sort(intList2);
		
System.out.println(intList1); // [1, 2, 3, 4, 5]
System.out.println(intList2); // [1, 3, 5]
		
// 4. 포함여부 확인
// containsAll(Collection c): 매개변수로 전달된 Collection 객체가 모두 포함되는지 확인
// contains(Object o): 매개변수로 전달된 객체가 목록에 존재하는지 확인
if(intList1.contains(11)) { // 포함하지 않습니다.
	System.out.println("포함합니다.");
} else {
	System.out.println("포함하지 않습니다.");
}
		
if(intList1.containsAll(intList2)) { // 포함합니다.
	System.out.println("포함합니다.");
} else {
	System.out.println("포함하지 않습니다.");
}
		
// 5. 데이터추가
// add(E e): 매개변수로 전달받은 e를 목록의 마지막에 추가
// addAll(Collection c): 매개변수로 전달받은 Collection 객체의 데이터를 목록 마지막에 모두 추가
intList2.add(10);
intList2.add(13);
		
intList1.addAll(intList2);
		
System.out.println(intList1); // [1, 2, 3, 4, 5, 1, 3, 5, 10, 13]
System.out.println(intList2); // [1, 3, 5, 10, 13]
		
// 6. 특정 index의 데이터 수정
// set(int index, E e): 매개변수로 전달받은 index에 위치한 데이터를 e로 수정
intList1.set(1, 1000);
intList2.set(3, 2000);
		
System.out.println(intList1); // [1, 1000, 3, 4, 5, 1, 3, 5, 10, 13]
System.out.println(intList2); // [1, 3, 5, 2000, 13]
		
// 7. 리스트에 저장되어 있는 데이터의 개수 확인
// size() 메소드를 사용한다.
System.out.println(intList1.size()); // 10
System.out.println(intList2.size()); // 5
--------------------------------------------------------------classArray-----------------------------------------------------
List<Car> carList = new ArrayList<>();
		
carList.add(new Car("현대", "제네시스", 5000, "검정"));
carList.add(new Car("기아", "k9", 5000, "흰색"));
System.out.println(carList);
		
// List에 있는 데이터 하나씩 꺼낼 때는 get(int index) 메소드 사용한다.
for(int i = 0; i < carList.size(); i++) {
	carList.get(i).carInfo(); // car 요소 출력
}
		
// List에서도 향상된 for문 사용할 수 있다.
for(Car c : carList) {
	c.carInfo(); // car 요소 출력
}
--------------------------------------------------Linked List----------------------------------------------------
// LinkedList는 불연속적으로 존재하는 데이터를 앞뒤로 서로연결하여 링크를 만든 형태로 되어있다.
// LinkedList에는 Node라는 내부클래스가 선언되어 있고 
// Node 클래스 안에는 데이터 값과 이전, 다음 요소를 저장할 수 있는 변수가 존재한다.

// ArrayList와 LinkedList 속도 비교
List<String> arrayList = new ArrayList<>();
List<String> linkedList = new LinkedList<>();
		
long startTime;
long endTime;
		
startTime = System.nanoTime();
		
for(int i = 0; i < 1000000; i++) {
	arrayList.add(String.valueOf(i));
}
		
endTime = System.nanoTime();
		
System.out.println("ArrayList 순차적으로 데이터를 넣는데 걸린 시간: " +
	(endTime - startTime) + "나노초입니다.");
		
startTime = System.nanoTime();
		
for(int i = 0; i < 1000000; i++) {
	linkedList.add(String.valueOf(i));
}
		
endTime = System.nanoTime();
		
System.out.println("LinkedList 순차적으로 데이터를 넣는데 걸린 시간: " +
	(endTime - startTime) + "나노초입니다.");
System.out.println("-------------------------------------------");
		
// 1-2. 리스트 중간에 데이터를 넣는 속도 비교
startTime = System.nanoTime();
		
for(int i = 1000; i < 10000; i++) {
	arrayList.add(i, String.valueOf(i));
}
		
endTime = System.nanoTime();
		
System.out.println("ArrayList 중간에 데이터를 추가하는 데 걸린 시간: " +
	(endTime - startTime) + "나노초입니다.");
		
startTime = System.nanoTime();
		
for(int i = 1000; i < 10000; i++) {
	linkedList.add(i, String.valueOf(i));
}
		
endTime = System.nanoTime();
		
System.out.println("LinkedList 중간에 데이터를 추가하는 데 걸린 시간: " +
	(endTime - startTime) + "나노초입니다.");
System.out.println("-------------------------------------------");
		
// 1-3. 인덱스를 통해 데이터에 접근하는 속도 비교
startTime = System.nanoTime();
		
System.out.println(arrayList.get(80000));
		
endTime = System.nanoTime();
		
System.out.println("ArrayList 80000번 인덱스의 데이터에 접근하는 데 걸린 시간: " +
	(endTime - startTime) + "나노초입니다.");
		
startTime = System.nanoTime();
		
System.out.println(linkedList.get(80000));
		
endTime = System.nanoTime();
		
System.out.println("LinkedList 80000번 인덱스의 데이터에 접근하는 데 걸린 시간: " +
	(endTime - startTime) + "나노초입니다.");
------------------------------------------------- HashSet --------------------------------------------------------
// 1. Set 객체 생성
Set<String> strSet = new HashSet<>();
		
// 2. Set 데이터 추가
strSet.add("Java");
strSet.add("JDBC");
strSet.add("JavaScript");
strSet.add("HTML/CSS");
		
System.out.println(strSet); // [Java, HTML/CSS, JavaScript, JDBC]
System.out.println(strSet.size()); // 4
		
// 3. Set 중복된 데이터 추가
strSet.add("Java");
strSet.add("JDBC");
		
System.out.println(strSet); // [Java, HTML/CSS, JavaScript, JDBC]
System.out.println(strSet.size()); // 4
		
// 4. Set은 데이터의 순서가 없기 때문에 인덱스로 데이터에 접근할 수 있는 방법이 없다.
// Collection의 Iterator를 이용해서 Set에 담겨있는 데이터에 하나씩 접근해서 사용한다.
// Iterator 객체를 생성할 때는 Collection이 생성된 제네릭 타입과 동일하게 지정해야한다.
Iterator<String> iterator = strSet.iterator();
		
// Iterator의 hasNext(): 데이터가 남아있는지 검사하는 메소드, 남아있으면 true, 없으면 false
while(iterator.hasNext()) {
	// Iterator의 next(): Iterator 객체를 생성할 때 지정한 제네릭타입의 데이터를 하나씩 꺼내주는 메소드
	String str = iterator.next();
			
	System.out.println(str); // Java \ HTML/CSS \ JavaScript \ JDBC
}
		
// 5. 특정 값 제거
strSet.remove("Java");
strSet.remove("C");
		
System.out.println(strSet); // [HTML/CSS, JavaScript, JDBC]
System.out.println(strSet.size()); // 3
		
// 6. Set 비우기
strSet.clear();
		
System.out.println(strSet.size()); // 0
-----------------------------------------------Iterator, ListIterator-----------------------------------------------------
// Iterator, ListIterator, Enumeration은 모두 Collection에 저장되어 있는 요소에 접근할 때 사용한다

List<Car> carList = new ArrayList<>();
		
		carList.add(new Car("현대", "제네시스", 5000, "검정"));
		carList.add(new Car("현대", "소나타", 4000, "흰색"));
		carList.add(new Car("기아", "k9", 5000, "검정"));
		carList.add(new Car("기아", "ev6", 6000, "초록"));
		carList.add(new Car("현대", "그랜저", 4500, "회색"));
		
		System.out.println("carList의 데이터 개수: " + carList.size()); // 5
		
		// 1. Iterator 객체 얻기
//		Iterator<Car> carIterator = carList.iterator();
//		
//		while(carIterator.hasNext()) {
//			Car car = carIterator.next();
//			
//			car.carInfo();
//			
//			// iterator를 통한 데이터 삭제
//			// iterator.next 메소드로 데이터를 하나 꺼내온 후에 사용가능하다.
//			if(car.company.equals("현대")) {
//				// iterator.next 메소드를 통해 꺼내온 데이터 List에서 삭제
//				carIterator.remove();
//			}
//		}
		
		for(int i = 0; i < carList.size(); i++) {
			if(carList.get(i).company.equals("현대")) {
				carList.remove(i--);
			}
		}
		 
		System.out.println(carList.size());
		
		// 2. ListIterator 객체 얻기
		// cursor = 0 ListIterator 객체
		ListIterator<Car> carListIterator = carList.listIterator();
		
		// next메소드를 사용하면 iterator 객체가 다음 데이터를 가리키게 된다.
		// next => cursor + 1
		carListIterator.next();
		// cursor가 가리키고 있는 데이터 앞에 데이터를 추가한다.
		carListIterator.add(new Car("현대", "제네시스", 5000, "회색"));
		
		while(carListIterator.hasPrevious()) {
			// previous메소드는 iterator 객체가 이전 데이터를 가리키게 된다.
			carListIterator.previous();
			
			carListIterator.set(new Car("쉐보레", "카마로", 5000, "노란"));
		}
		
		System.out.println(carList.size());
		
		for(Car car : carList) {
			System.out.println(car);
		}
------------------------------------------------------HashMap---------------------------------------------------------
// 1. Map 객체 생성
// Map은 Key, Value 쌍으로 데이터(엔트리)가 저장되기 때문에
// 제네릭타입도 Key, Value 두 개를 지정해야된다.
Map<String, String> carMap = new HashMap<>();
				
// 2. Map에 데이터 추가
// put(key, value): key, value 한 쌍의 엔트리를 생성해서 Map에 저장
// key, value 모두 Map을 생성할 때 지정한 제네릭 타입의 값을 넣어줘야 한다.
// carMap의 형태
carMap.put("company", "현대");
carMap.put("model", "제네시스");
carMap.put("price", "5000");
carMap.put("color", "검정");
		
System.out.println(carMap); // {color=검정, price=5000, company=현대, model=제네시스}
		
// 3. value는 중복 값이 허용되고, key는 중복값이 허용되지 않는다.
carMap.put("discountPrice", "5000");
carMap.put("color", "빨강"); // color는 이미 있는 key 값이여서 value 값만 대입된다.
		
System.out.println(carMap); // {color=빨강, price=5000, discountPrice=5000, company=현대, model=제네시스}
		
// 4. key 값에 매핑된 value 값 가져오기
// get(key)
System.out.println(carMap.get("company")); // 현대
System.out.println(carMap.get("discountPrice")); // 5000
		
// 5. key의 값을 모를 때
// keySet 메소드를 통해 key의 값 가져오기
// Set<Key>
Set<String> keySet = carMap.keySet();
		
Iterator<String> iterator = keySet.iterator();
		
while(iterator.hasNext()) {
	String key = iterator.next();
			
	System.out.println(key); // color \ price \ discountPrice \ company \ model
	System.out.println(carMap.get(key));  // 빨강 \ 5000 \ 5000 \ 현대 \ 제네시스
}
		
// 6. entrySet 활용하기
// key, value값을 모두 모르는 상태고 다 확인하고 싶을 때
/*
 * entrySet 메소드 사용하면 Set<Entry> 형태로 리턴되고
 * Set<Entry>의 형태는
 * [
 * 		{company: 현대},
 * 		{model: 제네시스},
 * 		{price: 5000},
 * 		{color: 검정}
 * ]
 * */
Set<Entry<String, String>> entrySet = carMap.entrySet();
		
Iterator<Entry<String, String>> entryIterator = entrySet.iterator();
		
while(entryIterator.hasNext()) {
	Entry<String, String> entry = entryIterator.next();
			
	// Entry의 getKey, getValue 메소드
	// getKey: Entry 객체에 담겨있는 Key를 리턴하는 메소드
	// getValue: Entry 객체에 담겨있는 Value를 리턴하는 메소드
	System.out.println(entry.getKey()); // color \ price \ discountPrice \ company \ model
	System.out.println(entry.getValue()); // 빨강 \ 5000 \ 5000 \ 현대 \ 제네시스
			
	if(entry.getKey().equals("price")) {
		// setValue: Entry 객체에 담겨있는 Value 값 변경
		entry.setValue("6000");
	}
}	
System.out.println(carMap);
---------------------------------------------------MapObjectValue----------------------------------------------------
// Map의 value를 Object 타입으로 지정하면 value에 모든 타입을 담을 수 있게 된다.
// VO(Value Object), DTO(Data Transfer Object), Entity 클래스를 만드는 데
// DB의 테이블과 매핑되도록 만든다.
// 테이블들을 조인해서 데이터를 가지고오면 VO나 DTO, Entity로 담을 수 없는 데이터들이
// 생기기 때문에 Map을 이용한다.
// A 테이블: id, name
// AVO: int id, String name
// B 테이블: team_id, team_name, id
// BVO: int team_id, String team_name, int id
// id, name, team_id, team_name을 함께 가져오려면 새로운 클래스가 필요한데 
// 클래스를 새로 만드는 것보다 Map을 이용하는 것이 편하다.
// id, name, team_id, team_name의 타입이 모두 다르기때문에 value의 Object로
// 지정해서 모든 값들을 담을 수 있도록 한다.
Map<String, Object> objMap = new HashMap<>();
		
/*
 * {
 * 		serialNo: 1234,
 * 		intList: [
 * 					1,
 * 					2,
 * 					3,
 * 					4,
 * 					5
 * 				 ]
 * }
 * */
objMap.put("serialNo", 1234);
		
List<Integer> intList = new ArrayList<>();
		
intList.add(1);
intList.add(2);
intList.add(3);
intList.add(4);
intList.add(5);
		
objMap.put("intList", intList);
		
System.out.println(objMap); // {intList=[1, 2, 3, 4, 5], serialNo=1234}
------------------------------------------------------MapList-------------------------------------------------------
List<Car> carList = new ArrayList<>();
		
carList.add(new Car("현대", "제네시스", 5000, "검정"));
carList.add(new Car("현대", "소나타", 4000, "흰색"));
carList.add(new Car("기아", "k9", 5000, "검정"));
carList.add(new Car("기아", "ev6", 6000, "초록"));
carList.add(new Car("현대", "그랜저", 4500, "회색"));
		
// 1. Map이 여러개 저장되어있는 List 생성
List<Map<String, Object>> mapList = new ArrayList<>();
		
for(Car car : carList) {
	Map<String, Object> carMap = new HashMap<>();
			
	carMap.put("company", car.company);
	carMap.put("model", car.model);
	carMap.put("price", car.price);
	carMap.put("color", car.color);
		
	mapList.add(carMap);
}
		
System.out.println(carList);
System.out.println("----------------------");
System.out.println(mapList);
