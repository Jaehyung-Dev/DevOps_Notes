-------------------------------Car 클래스 배열로 선언하기---------------------------
1. 속성 2개와 carInfo 함수를 가진 Car 클래스 만들기
public class Car {
	public int price;
	public String color;
	
	public Car() {

	}
	
	public Car(int price, String color) {
		this.price = price;
		this.color = color;
	}
	
	public void carInfo() {
		System.out.println("가격 : " + this.price);
		System.out.println("색상 : " + this.color);
	}
}
-----------------------------------------------
2.Car 클래스 객체 배열로 선언하기
public static void main(String[] args) {
		// 1. 객체 배열 선언
		// 100개의 모든 요소가 null인 상태로 만들어진다.
		Car[] carArr = new Car[100];
		
		// 아래와 같이 선언하면 모든 요소가 null이 그대로 들어가고
		// null에는 어떠한 속성도 기능도 존재하지 않기 때문에 오류 발생.
//		carArr[0].carInfo();
		
		// 2. 객체 배열의 값 저장
		// 객체배열의 요소에는 항상 객체가 저장되어야 한다.
		carArr[0] = new Car(5000, "검정");
		carArr[1] = new Car(5000, "초록");
		carArr[2] = new Car(3000, "흰색");
		
		// 3. 객체 배열 사용
		// 객체 배열 요소에 하나씩 접근해서
		// 요소가 객체이기 때문에 객체에 있는 메소드나 속성들을 사용해야한다.
		carArr[0].price = 10000;
		carArr[0].color = "빨간색";
		
		carArr[0].carInfo();

		// 정수 배열의 경우 아래와 같이 값만 사용
//		int[] intArr = new int[100];
//		
//		intArr[0] = 1;
//		
//		System.out.println(intArr[0]);
		
		// 4. 일반 for문과 향상된 for문 사용가능
		for(int i = 0; i < carArr.length; i++) {
			// nullpointException을 피하기 위한 예외처리
			if(carArr[i] != null) {
				// carArr에 저장되어 있는 Car 객체를 하나씩 꺼내서 사용
				carArr[i].carInfo();
			}
		}
		
		// CarArr는 Car타입 변수이기 때문에 Car타입으로 지정해서 향상된 for문 이용가능
		for(Car c : carArr) {
			if(c != null) {
				c.carInfo();
			}
		}
		
	}
-------------------------------Car 인터페이스 배열로 선언하기-------------------------------
1. carInfo 함수가 선언된 인터페이스 만들기

public interface CarInterface {
	void carInfo();
}
---------------------------------------------
2. 4가지 속성이 있는 CarStat 클래스 만들기

public class CarStat {
	public String company;
	public String model;
	public int price;
	public String color;
	
	public CarStat() {
		
	}
	
	public CarStat(String company, String model, int price, String color) {
		this.company = company;
		this.model = model;
		this.price = price;
		this.color = color;
	}
}
---------------------------------------------
3. CarInterface와 CarStat클래스를 상속받은 KiaCar 클래스 만들기

public class KiaCar extends CarStat implements CarInterface{
	public KiaCar() {
		super();
	}
	
	public KiaCar(String model, int price, String color) {
		super("기아", model, price, color);
	}
	
	@Override
	public void carInfo() {
		System.out.println("제조사 : " + this.company);
		System.out.println("모델 : " + this.model);
		System.out.println("가격 : " + this.price);
		System.out.println("색상 : " + this.color);
	}
	public void speedUp() {
		System.out.println("속도를 올립니다.");
	}
}
---------------------------------------------
4.CarInterface와 CarStat클래스를 상속받은 HuyndaiCar 클래스 만들기

public class HuyndaiCar extends CarStat implements CarInterface{
	public int num1 = 4;
	public HuyndaiCar() {
		super();
	}
	
	public HuyndaiCar(String model, int price, String color) {
		super("현대", model, price, color);
	}
	
	@Override
	public void carInfo() {
		
		System.out.println("제조사 : " + this.company);
		System.out.println("모델 : " + this.model);
		System.out.println("가격 : " + this.price);
		System.out.println("색상 : " + this.color);
	}
	
	public void speedUp() {
		System.out.println("속도를 올립니다.");
	}
}
---------------------------------------------
5. 인터페이스 배열 선언해서 사용하기

public static void main(String[] args) {
		// 1. 인터페이스 배열 선언
		// 모든 요소가 null인 상태로 배열이 생성된다.
		// 클래스 배열을 사용하게 되면 HuyndaiCar 배열과 kiaCar 배열을 각각 생성해야 했지만
		// 인터페이스 배열을 사용하므로써 하나의 배열에 HuyndaiCar 객체와 KiaCar 객체를 모두 저장해서 사용할 수 있는 확장성이 생긴다.
		CarInterface[] carInterfaceArr = new CarInterface[100];
		
		// 2. 인터페이스 배열에 값 저장
		// 인터페이스는 객체를 만들 수가 없기 때문에
		// 인터페이스 배열의 요소에는 인터페이스를 상속받은 자식 객체가 저장된다.
		carInterfaceArr[0] = new HuyndaiCar("제네시스", 5000, "검정");
		carInterfaceArr[1] = new KiaCar("k9", 5000, "흰색");
		
		// 3. 인터페이스 배열의 값 사용
		// 인터페이스에 정의된 메소드만 사용할 수 있다.
		carInterfaceArr[0].carInfo();
		
		// 아래는 사용이 불가능
//		carInterfaceArr[0].speedUp();
		
		// 4. for문과 향상된 for문 사용가능
		for(CarInterface carInterface : carInterfaceArr) {
			carInterface.carInfo();
		}
	}
-------------------------------Object 클래스 배열로 선언하기--------------------------
public class _03_ObjectArray {

	public static void main(String[] args) {
		Object[] objArr = new Object[100];
		
		// Object는 자바의 최상위 클래스이므로 Object로 배열을 만들면 
    // 자바의 모든 타입의 값을 담을 수 있는 배열을 만들 수 있다.
		// 위에서 만든 HuyndaiCar 타입부터 문자열 정수형까지 모든 타입을 담을 수 있음
		objArr[0] = new HuyndaiCar("제네시스", 5000, "검정");
		objArr[1] = "aaa";
		objArr[2] = 1000;
		objArr[3] = new int[1000];
		
		// Object는 사용시에 변환하는 과정이 필요하다.
		CarInterface carInterface = (CarInterface)objArr[0];
		carInterface.carInfo(); // 제네시스, 5000, 검정
		
		String str = (String)objArr[1];
		System.out.println(str); // aaa
		
		int intValue = (Integer)objArr[2];
		System.out.println(intValue); // 1000
	}
}
