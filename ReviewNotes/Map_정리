// Map 객체 생성
// Map은 key, Value 쌍으로 데이터가 저장되어야 해서 
// 제네릭타입도 key, value 두 개를 지정해야한다.
// Map<제네릭타입1, 제네릭타입2> 변수이름 = new HashMap<>();
Map<String, String> carMap = new HashMap<>();

// Map에 데이터 추가
// key와 value 한 쌍을 생성해서 Map에 저장 - key와 value 모두 지정한 제네릭 타입을 맞춰야 됨
// Map변수명.put(key값, value값);
carMap.put("company","현대");

// value는 중복 값이 허용되고 key는 중복값이 허용되지 않음
carMap.put("company","기아"); // key값이 같으므로 기존 key(company)값이 현대->기아로 변경
carMap.put("mainCompany", "현대"); // value값이 같으나 새로운 key값에 대입

// key값에 매핑된 value값 가져오기
// Map변수명.get(key값); : key값에 해당하는 value값 가져오기
// carMap.get("company"); // key(company) 에 해당하는 value(현대)값 리턴

// key값을 모를 때 - keySet() 메소드 이용
// Set<제네릭타입> 변수명 = Map변수명.keySet();
Set<String> keySet = carMap.keySet();

Iterator<String> iterator = keySet.iterator(); // 컬렉션 요소에 접근하기 위해 iterator를 생성

while(iterator.hasNext()) { // hasNext()로 컬렉션 요소를 확인
    String key = iterator.next(); // String key에 iterator에서 가져온 컬렉션 요소를 저장

    System.out,println(key); // key값 출력
    System.out.println(carMap.get(key)); // get메소드를 이용해 key에 해당하는 value값 출력
}

// key, value를 모두 모를 때 - entrySet() 메소드 이용
// Map.Entry는 Map 내부에 저장된 각각의 key-value 쌍을 나타내는 인터페이스
// entrySet 메소드를 사용하면 Set<Entry>형태로 리턴
// Set<Entry<제네릭타입1, 제네릭타입2>> 변수명 = Map변수명.entrySet();
Set<Entry<String, String>> entrySet = carMap.entrySet(); 

Iterator<Entry<String, String>> entryIterator = entrySet.iterator(); // 컬렉션 요소에 접근하기 위해 iterator를 생성

while(entryIterator.hasNext()) { // hasNext()로 컬렉션 요소를 확인
    Entry<String, String> entry = entryIterator.next(); // Entry를 만들고 Iterator를 통해 받아온 Map의 값 String 형태로 받기
    System.out.println(entry.getKey()); // key값 출력
    System.out.println(entry.getValue()); // value값 출력
}

// MapList : Map이 여러개 저장되어있는 List
// List<Map<제네릭타입1, 제네릭타입2>> 변수명 = new ArrayList<>();
List<Map<String, String>> mapList = new ArrayList<>();

// Map의 value를 Object 타입으로 지정 -> Value에 모든 타입을 담을 수 있다.
// DB에서 조인된 데이터를 효과적으로 관리하기 위해 Map의 value 타입을 Object로 지정하여 
// 다양한 타입의 데이터를 저장할 수 있도록 하는 것.
Map<String, Object> objMap = new HashMap<>();

// Map의 Value Object - DB 데이터 join 활용 예시
// A 테이블: id, name
// AVO: int id, String name
// B 테이블: team_id, team_name, id
// BVO: int team_id, String team_name, int id
// id, name, team_id, team_name을 함께 가져오려면 새로운 클래스가 필요한데 
// 클래스를 새로 만드는 것보다 Map을 이용하는 것이 편하다.
// id, name, team_id, team_name의 타입이 모두 다르기때문에 value의 Object로
// 지정해서 모든 값들을 담을 수 있도록 한다.

