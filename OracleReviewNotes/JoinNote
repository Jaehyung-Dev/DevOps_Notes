-- JOIN은 여러 테이블에 분산되어 있는 데이터를 한 번에 조회하기 위해 사용하는 기능

-- 1. Inner Join
-- Inner Join은 두 테이블에 공통된 데이터를 조회하는 기능
-- 두 테이블에 존재하는 공통된 컬럼을 조인 조건으로 명시한다.
SELECT ST.SNO
	 , ST.SNAME
	 , SC.CNO
	 , SC.RESULT
	FROM STUDENT ST
	INNER JOIN SCORE SC
	   ON ST.SNO = SC.SNO; -- JOIN 절에는 항상 공통 컬럼에 해당하는 조건의 ON 절을 만들어줘야 한다.

SELECT C.PNO
	 , C.CNO
	 , C.CNAME
	 , P.PNO
	 , P.PNAME
	FROM COURSE C
	INNER JOIN PROFESSOR P -- COURSE, PROFESSOR 테이블 조인
	   ON C.PNO = P.PNO;
	   
-- INNER JOIN에서 INNER는 생략 가능하다.
SELECT C.PNO
	 , C.CNO
	 , C.CNAME
	 , P.PNO
	 , P.PNAME
	FROM COURSE C
	JOIN PROFESSOR P
	   ON C.PNO = P.PNO;
	   
-- 1-1. 등가조인
-- 등가조인은 공통된 컬럼에서 같은 데이터만을 조회하는 조인
-- ANSI 표준 방식
SELECT D.DNO
	 , D.DNAME
	 , D.LOC
	 , E.DNO
	 , E.ENAME
	 , E.ENO
	 , E.JOB
	 , E.SAL
	 , E.COMM
	FROM DEPT D
	JOIN EMP E
	  ON D.DNO = E.DNO;
	 
-- ORACLE에서만 사용하는 방식의 JOIN
SELECT D.DNO
	 , D.DNAME
	 , D.LOC
	 , E.DNO
	 , E.ENAME
	 , E.ENO
	 , E.JOB
	 , E.SAL
	 , E.COMM
	FROM DEPT D
	   , EMP E
	WHERE E.DNO = D.DNO;

-- 세 개 테이블 이상의 테이블 조인
SELECT ST.SNO
	 , ST.SNAME
	 , SC.CNO
	 , C.CNAME
	 , SC.RESULT
	FROM STUDENT ST
	JOIN SCORE SC
	  ON ST.SNO = SC.SNO 
	JOIN COURSE C
	  ON SC.CNO = C.CNO; -- JOIN~ON절을 한 번 더 사용
	  
-- 1-2 비등가조인
-- 비등가 조인은 해당 컬럼의 데이터 값이 큰지 작은지, 사이값인지 부등호나 BETWEEN AND 절을 이용해서 비교하는 조인 구문

-- 부등호 사용용
SELECT ST.SNO
	 , ST.SNAME
	 , SC.CNO
	 , C.CNAME
	 , SC.RESULT
	 , GR.GRADE
	FROM STUDENT ST
	JOIN SCORE SC
	  ON ST.SNO = SC.SNO 
	JOIN COURSE C
	  ON SC.CNO = C.CNO
	JOIN SCGRADE GR
    --비등가조인사용
	  ON SC.RESULT <= GR.HISCORE
	 AND SC.RESULT >= GR.LOSCORE;

-- BETWEEN AND 절 사용
SELECT ST.SNO
	 , ST.SNAME
	 , SC.CNO
	 , C.CNAME
	 , SC.RESULT
	 , GR.GRADE
	FROM STUDENT ST
	JOIN SCORE SC
	  ON ST.SNO = SC.SNO 
	JOIN COURSE C
	  ON SC.CNO = C.CNO
	JOIN SCGRADE GR
	  ON SC.RESULT BETWEEN GR.LOSCORE AND GR.HISCORE
	ORDER BY ST.SNO, SC.CNO;
	
-- 1-3. 셀프조인
-- 조인되는 두 테이블을 동일할 때 셀프조인이라 부른다.
SELECT E.ENO
	 , E.ENAME
	 , E.MGR
	 , EM.ENAME 
	FROM EMP E 
	JOIN EMP EM -- 위의 EMP와는 독립된 테이블
	  ON E.MGR = EM.ENO;
	  
-- 1-4. CROSS JOIN
-- 여러 테이블을 조인할 때 조인 조건을 지정하지 않으면 cross join이 일어난다.
-- cross join은 조인되는 모든 테이블의 데이터들이 1대1로 매핑되어 조회되는 현상이다.
-- 테이블들을 조인할 때는 항상 조인 조건을 명시하여 cross join이 일어나지 않도록 한다.
SELECT ST.SNO
	 , ST.SNAME
	 , SC.CNO
	 , C.CNAME
	 , SC.RESULT
	FROM STUDENT ST
		, SCORE SC
		, COURSE C;
		
-- 2. OUTER JOIN
-- OUTER JOIN은 INNER JOIN 결과에 추가로 기준이 되는 테이블에 남아있는 데이터를 조회하는 기능
-- 기준이 되는 테이블은 OUTER JOIN 앞에 LEFT, RIGHT, FULL로 지정한다.
	
-- 2-1. LEFT OUTER JOIN
-- FROM 절의 테이블에만 존재하는 데이터를 추가로 조회하는 JOIN

-- ANSI 표준 방식
SELECT ST.SNO
	 , ST.SNAME
	 , SC.RESULT
	FROM STUDENT ST
	LEFT OUTER JOIN SCORE SC -- SCORE에 NULL인 값도 STUDENT를 기준으로 하여 출력
	  ON ST.SNO = SC.SNO
	 ORDER BY ST.SNO DESC;

-- ORACLE에서만 사용하는 LEFT OUTER JOIN 방식 (+) 기호를 이용한다.
-- (+) 기호는 LEFT OUTER JOIN과 RIGHT OUTER JOIN만 사용 가능
SELECT ST.SNO
	 , ST.SNAME
	 , SC.RESULT
	FROM STUDENT ST
		, SCORE SC
	WHERE ST.SNO = SC.SNO(+) -- (+)가 붙은 데이터테이블에 있는 내용을 추가로 가져온다.
	 ORDER BY ST.SNO DESC; 
	
-- 사원의 사원번호, 사원이름, 사수번호, 사수이름을 조회하는데 사수가 배정되지 않은 사원의 정보도 조회(셀프조인)
SELECT E.ENO 
	 , E.ENAME 
	 , E.MGR
	 , EM.ENAME
	FROM EMP E
	LEFT OUTER JOIN EMP EM
	  ON E.MGR = EM.ENO;
	
-- LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN 에서 OUTER는 생략 가능하다.	
SELECT E.ENO 
	 , E.ENAME 
	 , E.MGR
	 , EM.ENAME
	FROM EMP E
	LEFT JOIN EMP EM
	  ON E.MGR = EM.ENO;	

-- 2-2. RIGHT OUTER JOIN
-- INNER JOIN 조회 결과와 추가로 조인되는 테이블에만 존재하는 데이터를 조회하는 JOIN
SELECT C.CNO 
	 , C.CNAME 
	 , P.PNO 
	 , P.PNAME 
	FROM COURSE C
	RIGHT JOIN PROFESSOR P
	  ON C.PNO = P.PNO; -- 과목번호, 과목이름, 교수번호, 교수이름 조회하는데 아직 담당과목을 배정받지 못한 교수 정보도 조회
	 
SELECT C.CNO 
	 , C.CNAME 
	 , P.PNO 
	 , P.PNAME 
	FROM PROFESSOR P
	LEFT JOIN COURSE C
	  ON C.PNO = P.PNO;
	
-- 3. FULL OUTER JOIN
-- FULL OUTER JOIN은 INNER JOIN된 조회 결과에 FROM 절 테이블에만 존재하는 데이터, 조인되는 테이블에만 존재하는 데이터 모두 조회하는 JOIN
SELECT C.CNO
	 , C.CNAME
	 , P.PNO
	 , P.PNAME
	FROM COURSE C
	FULL OUTER JOIN PROFESSOR P
	  ON C.PNO = P.PNO; -- 교수가 배정되지 않은 과목과 담당과목이 배정되지 않은 교수의 정보도 모두 조회

-- 4. 다중 테이블 조인
-- 사원의 사원번호, 사원이름, 급여, 급여등급, 부서번호, 부서이름 조회하는데 부서를 배치받지 않은 사원의 정보도 조회
SELECT E.ENO
	 , E.ENAME
	 , E.SAL
	 , GR.GRADE
	 , E.DNO
	 , D.DNAME
	FROM EMP E
	JOIN SALGRADE GR
	  ON E.SAL BETWEEN GR.LOSAL AND GR.HISAL
	LEFT JOIN DEPT D
	  ON E.DNO = D.DNO;
	  
-- ON절에도 조건을 여러개 추가할 때는 WHERE 절과 마찬가지로
-- AND, OR를 사용해서 여러개 조건을 명시할 수 있다.
-- 급여가 3000이상이고 부서번호가 01, 10, 20, 60인
-- 사원의 사원번호, 사원이름, 급여, 급여등급, 부서번호, 부서이름 조회하는데 부서를 배정받지 않은 사원의 정보도 조회
-- OUTER JOIN이라서 조인조건이 달라져서 다른 데이터가 나오게 된다.
SELECT E.ENO
	 , E.ENAME
	 , E.SAL
	 , GR.GRADE
	 , E.DNO
	 , D.DNAME
	FROM EMP E
	JOIN SALGRADE GR
	  ON E.SAL BETWEEN GR.LOSAL AND GR.HISAL
	 AND E.SAL >= 3000
	LEFT JOIN DEPT D
	  ON E.DNO = D.DNO
	 AND E.DNO IN ('01', '10', '20', '60'); 
	 
-- 다른 데이터가 조회되는 조건
SELECT E.ENO
	 , E.ENAME
	 , E.SAL
	 , GR.GRADE
	 , E.DNO
	 , D.DNAME
	FROM EMP E
	JOIN SALGRADE GR
	  ON E.SAL BETWEEN GR.LOSAL AND GR.HISAL
	LEFT JOIN DEPT D
	  ON E.DNO = D.DNO
	WHERE E.SAL >= 3000
      AND E.DNO IN ('01', '10', '20', '60'); 

SELECT E.ENO
	 , E.ENAME
	 , E.DNO
	 , D.DNAME
	FROM EMP E
	LEFT JOIN DEPT D
	  ON E.DNO = D.DNO 
	 AND E.DNO IN ('01', '10', '20', '60');
