-- 1.기본 Select 구문
SELECT 컬럼명
   , 컬럼명(2개 이상 ,으로 연결)
  FROM 테이블명;

-- 1-1. 조회할 테이블의 모든 컬럼의 데이터를 조회할 때는 컬럼명 대신 *를 사용해도 된다.
SELECT *
	FROM 테이블명;

-- 2. 컬럼이나 테이블에 별칭 붙이기

-- 2-1. 컬럼에 별칭 붙이기
SELECT 컬럼명 AS 별칭명
  FROM 테이블명;

-- 2-2. 테이블에 별칭 붙이기
SELECT 테이블명.컬럼명
  FROM 컬럼명;

SELECT STUDENT.SNO
   FROM STUDENT;

-- 2-3. 테이블명 뒤에 바로 붙일 별칭을 달아준다.
SELECT 컬럼명
	FROM 테이블명 테이블별칭;

SELECT ST.SNO
	FROM STUDENT ST;

-- 3. NULL인 데이터의 처리방식을 지정하는 NVL
SELECT 컬럼명
   , NVL(컬럼명, 대체할 값) AS 컬럼명 // AS 컬럼명을 붙여주는 이유는 NVL이 표제로 나오는 것을 대체해주기 위함

SELECT DNO
	 , NVL(DIRECTOR, '팀장없음') AS DIRECTOR 
	FROM DEPT;

-- 4. 연결연산자(||) : 조회하고 싶은 컬럼들을 연결 조회가능 - 컬럼과 리터럴(문자열) 연결도 가능
SELECT 컬럼명
   , 컬럼명 || '연결할 문자' || 컬럼명
   , FROM 테이블명;

SELECT ENO
	 , ENAME || '-' || SAL -- ENAME과 SAL을 - 로 연결
	 FROM EMP;

-- 5. 중복제거자 DISTINCT
SELECT DISTINCT 중복을 제거할 컬럼명
  FROM 테이블명;

SELECT DISTINCT JOB
	 , MGR
	FROM EMP;

-- 6. 데이터 정렬 ORDER BY

-- 6-1. 컬럼 하나만 정렬
SELECT 컬럼명
   FROM 테이블명
   ORDER BY 정렬할 컬럼명;

SELECT SYEAR
	FROM STUDENT
	ORDER BY SYEAR; 

-- 6-2. 컬럼 하나만 내림차순 정렬
SELECT 컬럼명
   FROM 테이블명
   ORDER BY 정렬할 컬럼명 DESC;

SELECT SYEAR
	FROM STUDENT
	ORDER BY SYEAR DESC; 

-- ORDER BY 여러개의 컬럼을 지정할 때는 각 컬럼에 정렬방식을 각각 지정할 수 있다.
SELECT SNO
	 , SNAME
	 , SYEAR
	 , AVR
	 FROM STUDENT
	 ORDER BY SYEAR, MAJOR DESC, AVR;

-- 6-4. 컬럼에 별칭을 붙인 경우에는 별칭으로도 정렬가능
SELECT ENO
	 , DNO AS 부서번호
	 , SAL AS 급여
	 FROM EMP
	 ORDER BY 부서번호, 급여 DESC;

-- 7. 조건을 걸어서 원하는 데이터만 조회하는 WHERE절 -> FROM이나 JOIN~ON절 다음에 작성
-- 7-1. 부등호를 사용하여 값의 크기 비교
SELECT ENO
	 , ENAME
	 , SAL
	FROM EMP 
	WHERE SAL >= 3000; --급여가 3000이상인 조건

-- 7-2. WHERE 절에서 값의 동일여부를 비교할 때는 =, != 을 사용한다.
SELECT SNAME
	 , MAJOR
	FROM STUDENT
	WHERE MAJOR != '화학'; -- 전공이 화학과가 아닌 조건

-- 7-3. WHERE 절에서 조건을 비교할 때는 항상 컬럼의 타입과 동일한 타입의 값으로 비교해야 한다.
-- 비교를 하려는 컬럼의 형식과 다른 형식의 비교를 하게되면 형식이 변환되는 과정이 필요하게 된다.

-- 7-4. NULL인 값의 비교는 =, !=로 하지 않고 IS NULL, IS NOT NULL이라는 특수한 구문을 이용한다.
SELECT ENAME
	 , COMM
	FROM EMP
	WHERE COMM IS NOT NULL; -- 보너스가 NULL이 아닌 조건
  WHERE COMM IS NULL; -- 보너스가 NULL일 때의 조건

-- 7-5. 문자열을 포함한 데이터 조회(LIKE)
SELECT CNAME
	FROM COURSE
	WHERE CNAME LIKE '%화학%'; -- %가 붙는 기준으로 상관없음

-- "_"(언더바) 로 글자수를 제한
SELECT PNAME
	FROM PROFESSOR
	WHERE PNAME LIKE '___'; 
 
-- 8-1. AND절 : 다중 조건을 모두 충족하는 데이터만 조회
SELECT SNAME
	 , SYEAR
	FROM STUDENT
	WHERE SYEAR = 1
	  AND SNAME LIKE '노%'; -- SYEAR이 1이고 노씨 성인 이름 조건

-- 8-2. OR 절 : 다중 조건 중 하나라도 충족하는 데이터들을 모두 조회
SELECT SNAME
	 , SYEAR
	FROM STUDENT
	WHERE SYEAR = 1
	   OR SNAME LIKE '노%'; -- SYEAR이 1이거나 노씨 성인 이름 조건

-- 8-3. AND, OR 혼합 사용도 가능
-- AND, OR를 혼합하여 사용하면 조건을 알아보기 힘들어지기 때문에
-- ()를 통해 조건의 우선순위를 정해준다.
SELECT SNAME
	 , MAJOR
	FROM STUDENT
	WHERE (MAJOR = '화학'
	   OR MAJOR = '물리')
	  AND SYEAR = 1;

-- 9. 특정한 범위의 값인지 비교해주는 BETWEEN AND 구문
SELECT ENAME
	 , SAL
	 FROM EMP
	 WHERE SAL BETWEEN 3000 AND 5000; -- SAL 값이 3000 ~ 5000 사이 조건

-- 10. 여러개의 데이터와 값을 비교하는 IN 절
SELECT SNO
	 , SNAME
	 , MAJOR
	 , SYEAR
	FROM STUDENT
	WHERE MAJOR = '화학'
	   OR MAJOR = '물리';
	  
SELECT SNO
	 , SNAME
	 , MAJOR
	 , SYEAR
	FROM STUDENT
	WHERE MAJOR IN ('화학', '물리'); -- 위 코드와 같으나 훨씬 간편함

-- TO_DATE : 데이터의 형식을 날짜형식으로 변경한다.
-- TO_DATE(문자열, 문자열의 날짜형식)
SELECT PNO
	 , PNAME
	 , HIREDATE
	FROM PROFESSOR
	WHERE HIREDATE 
		BETWEEN TO_DATE('20000101 00:00:00', 'yyyyMMdd HH24:mi:ss')
			AND TO_DATE('2001/12/31 23:59:59', 'yyyy/MM/dd HH24:mi/ss');
