11번 파일 : root-context.xml AOP설정 학습
12번 파일 : root-context.xml AOP설정에서 시점 학습 
13번 파일 : AfterReturnin.java - Joinpoint 설정, root-context.xml afterreturning
		AfterThrowing.java -Joinpoint 설정 학습
14번 파일 : JDBC로 만든 비즈니스 컴포넌트를 JDBC Template 형태로 변환
		db.properties 파일,  root-context.xml에 properties 파일 참조하는 부분
		Mapper.java 파일 확인
15번 파일 : root-context.xml에서 Transaction 설정 
		aop:advisor 사용하는 이유
16번 파일 : mappings 폴더의 mapper.xml 설정 
		sql-map-config.xml 설정
		root-context.xml mybatis설정
		Dao.java 파일에서 필드변수, 생성자 부분 확인 - mybatis
		Dao.java 메소드 내부 확인 - mybatis 사용 방법
17번 파일 : web.xml context-param value 확인
		WEB-INF 폴더 index, header, footer.jsp 파일들
		static 폴더 내부 구성 -> 강사님이 경로를 static 
		views 폴더 
		어떤 설정들을 어디에 넣었는지 확인 
		WEB-INF 폴더는 무조건 servlet을 통해서만 접근 가능 
		href 에도 servlet을 통한 주소 매핑
		controller 폴더 확인 - 연결은 context:component-scan에서 매핑
18번 파일 : NAME_TEL 테이블 create 
		쿼리스트링 : ?key1=value1&key2=value2 ...
		NameTelController 설정들

19번 파일 : 
id: 이 쿼리의 고유 식별자입니다. Java 코드에서 이 쿼리를 호출할 때 사용됩니다
parameterType: 이 쿼리에 전달되는 매개변수의 타입을 지정합니다
resultType: 쿼리 실행 후 반환되는 결과의 타입을 지정합니다

21번 파일업로드
dto는 껍데기에 불과하니 원할 떄 원하는 데이터만 담아서 전달해주면 되므로 굳이 개별로 만들 필요가 없다
그러나 dao는 직접적으로 DB와 연결이 되어 있기 때문에 각 테이블 별로 Dao를 따로 구현해준다
mybatis에서는 쿼리가 mapper로 이동했으므로 mapper 또한 따로 만들어서 구현
serviceImpl 또한 추가로 필요한 비즈니스 로직을 구현하기 위한 클래스이므로 각 테이블 별로 따로 구현해준다.
