	// 1. 인터페이스 Board 선언
	// 인터페이스는 추상클래스보다 추상화 레벨이 더 높은 클래스
	// 추상클래스가 인스턴스 변수, 인스턴스 메소드, 추상 메소드를 가질 수 있는 반면
	// 인터페이스는 public static final로 선언된 상수와 추상메소드만 가질 수 있다.
	// 인터페이스에서는 변수를 선언하면 컴파일러에 의해서 public static final 이 자동으로 붙어서 생성된다.
	// 메소드도 마찬가지로 선언하면 기본적으로 public abstract가 붙어서 생성된다.
	// 인터페이스의 메소드는 추상메소드이기 때문에 구현부({} 블록)를 만들 수 없다.
	// 인터페이스도 추상클래스의 일종이기 때문에 객체를 만들 수가 없어서 자식 객체를 통해 사용한다.
	// 변수를 선언할 때 타입으로는 지정이 가능
	// 인터페이스의 변수는 public static final이 붙고, 메소드에는 public abstract가 붙기 때문에
	// 인터페이스에서 선언된 변수나 메소드의 접근제어자는 무조건 public이다.
  public interface Board {
	// 변수는 static final로 지정되는데
	// 여기서 static 키워드에 의해서 메모리에 저장될 때 값이 저장이 되어 있지 않으면 안되기 때문에 
	// 선언 시 값을 바로 초기화 하지않으면 에러가 발생한다.
  	int num; // 에러 발생
	int num = 10;
	
	// 인터페이스에서 정의되는 모든 메소드는 추상메소드이기 때문에 
	// 구현부({} 블록)을 만들면 Abstract methods do not specify a body 에러가 발생한다.
 	//	void post() {
  	//		System.out.println("글 등록");
  	//	}
		
	// 메소드는 선언만 한 상태로 정의한다.
	void post();
	void modify();
	void delete();
	
	// 인터페이스에 기능을 추가하면 상속받은 모든 자식 클래스를 수정해야되는 문제가 발생한다.
	// 이러한 문제를 해결하기 위해서 나온 문법이 default 메소드
	// default 메소드는 인터페이스의 메소드에 구현부({} 블록)까지 만들 수 있는 메소드
	// default 메소드는 구현부를 만들 수 있기 때문에 상속받은 자식클래스에서 따로 구현하지 않아도 된다.
	default void getList() {
		System.out.println("게시글 목록 조회");
	}
}
-----------------------------------------------------------------------------------------------------
// 2.인터페이스 Board 를 상속받은 FreeBoard 클래스 만들기
// 인터페이스의 상속은 extends 키워드가 아니라 implements 키워드를 이용한다.
public class FreeBoard implements Board {

	// 인터페이스에서 메소드는 선언만 한 껍데기 상태이므로 상속받은 클래스에서 정의
	@Override
	public void post() {
		System.out.println("자유게시판 게시글 등록");
	}

	@Override
	public void modify() {
		System.out.println("자유게시판 게시글 수정");
	}

	@Override
	public void delete() {
		System.out.println("자유게시판 게시글 삭제");
	}
}
----------------------------------------------- 다중상속 ---------------------------------------------------
1. Mother, Father 인터페이스를 만든다
public interface FatherrInterface {
	void repair();
}

public interface MotherInterface {
	void calm();
}
-----------------------------------------------------------------------------------------------------
// 2. child 인터페이스를 만들어서 Mother, Father 인터페이스를 모두 상속받는다 -> Class는 다중 상속이 불가능
// ,를 이용해서 다중상속
public class ChildInterface implements MotherInterface, FatherrInterface {
	@Override
	public void repair() {
		System.out.println("잘 고친다.");
	}

	@Override
	public void calm() {
		System.out.println("침착하다.");
	}
}
------------------------------ 인터페이스에서 default와 static 메소드, 인터페이스끼리의 상속 -------------------------------- 
// 1.ElectronicDevice라는 인터페이스를 만들고 default와 static 메소드를 선언
public interface ElectronicDevice {
	void powerIn();
	void powerOff();
	
	// default 메소드 선언
	// default 메소드도 상속받은 클래스에서 오버라이드할 수 있다.
	default void reset() {
		System.out.println("장치를 리셋한다.");
	}
	
	// 인터페이스에도 static 키워드로 정적 메소드를 생성할 수 있다.
	// static 메소드는 클래스를 로드하면서 바로 메모리에 저장, 사용할 수 있는 상태가 되기 때문에
	// 추상메소드 형태로는 만들지 못하고 구현부까지 완벽한 메소드 형태로 만들어야한다.
	// static 메소드는 오버라이드 할 수 없다.
	static void warn() {
		System.out.println("경고를 울린다.");
	}
}
---------------------------------------------------------------------------------------------
// 2.ElectronicDevice인터페이스를 상속받은 Computer인터페이스 만들기
// 인터페이스끼리 상속은 implements 키워드가 아닌 extends 키워드 사용
public interface Computer extends ElectronicDevice {
	void playgame();
}
---------------------------------------------------------------------------------------------
// 3.Computer인터페이스를 상속받은 Desktop 클래스 만들기
// default 메소드는 오버라이드 가능, static 메소드는 오버라이드 불가능
public class Desktop implements Computer {
  
	@Override
	public void playgame() {
		System.out.println("게임을 합니다.");
	}	

	@Override
	public void powerIn() {
		
	}

	@Override
	public void powerOff() {
		
	}
	
	// default 메소드도 오버라이드 할 수 있다.
	@Override
	public void reset() {
		System.out.println("엘지티비 재부팅합니다.");
	}
	
	// static 메소드는 오버라이드 할 수 없다.
//	@Override
//	public void warn() {
//		
//	}
}
---------------------------------------------------------------------------------------------
// 4.main 메소드에서 실행

public static void main(String[] args) {
		Desktop dt = new Desktop();
		
		dt.powerIn();
		dt.changerChannel(11);
		//오버라이드된 default 메소드 사용
		dt.reset();
		
		// static 메소드는 상속받은 자식클래스에서는 사용이 불가능하다.
//		dt.warn();
	}
