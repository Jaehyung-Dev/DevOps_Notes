double num = 1234.5678;
		
// 1. ceil : 소수점 첫 째자리에서 올림. double 타입으로 리턴
System.out.println(Math.ceil(num)); // 1235.0
		
// 2. 소수점 셋째 자리까지 올림
System.out.println(Math.ceil(num * 1000) / 1000); // 1234.568
		
// 3. round : 소수점 첫째 자리에서 반올림. long 타입으로 리턴
System.out.println(Math.round(num)); // 1235
		
// 4. 소수점 둘째 자리까지 반올림
System.out.println((double)Math.round(num * 100) / 100); // 1234.57
		
// 5. floor : 소수점 첫째 자리에서 버림. double 타입으로 리턴
System.out.println(Math.floor(num)); // 1234.0
		
// 6. 소수점 첫째 자리까지 버림
System.out.println(Math.floor(num * 10) / 10); // 1234.5

int num1 = 123;
int num2 = -456;
		
// 7. abs : 절대값을 리턴해주는 메소드.
System.out.println(Math.abs(num1)); // 123
System.out.println(Math.abs(num2)); // 456
		
// 8. max : 두 개의 매개변수 중 큰 값을 리턴
//    min : 두 개의 매개변수 중 작은 값을 리턴
//    두 개의 매개변수가 동일한 타입의 값으로 전달돼야한다.
System.out.println(Math.max(num1, num2)); // 123
System.out.println(Math.min(num1, Math.abs(num2))); 123
		
// 9. rint : 매개변수로 주어진 실수에서 가장 가까운 정수 값을 double 타입으로 리턴(근사치)
System.out.println(Math.rint(123.456)); // 123.0
System.out.println(Math.rint(1.5)); // 2.0
System.out.println(Math.rint(2.5)); // 2.0

// 10. BigInteger : long으로 표현 가능한 최대 19자리 이상의 정수를 사용하고 싶을 때 BigInteger 클래스 사용
// BigInteger 객체 생성
// 생성자를 통한 객체 생성
BigInteger bigInt1 = new BigInteger("10000000000000000000000000000000000000000000000000000");
// valueOf 메소드를 통한 객체 생성
BigInteger bigInt2 = BigInteger.valueOf(3000000000000000000L);
		
// toString : 객체에 저장되어 있는 값을 String 타입으로 변환
// Object의 toString 메소드가 오버라이드 되어있다.
System.out.println(bigInt1);
System.out.println(bigInt2);
		
// 연산 메소드를 통한 연산
// BigInteger 객체는 기본 연산자를 통한 연산을 지원하지 않아서 덧셈, 뺄셈, 곱셈, 나눗셈, 나머지 연산을 메소드를 통해 진행한다.
System.out.println(bigInt1.add(bigInt2)); 
System.out.println(bigInt1.subtract(bigInt2));
System.out.println(bigInt1.multiply(bigInt2));
System.out.println(bigInt1.divide(bigInt2));
System.out.println(bigInt1.remainder(bigInt2));

// 11. BigDecimal : double 보다 정밀한 실수형 오차 탐지에 사용(항공우주)
// BigDecimal 객체 생성
// 생성자를 통한 객체 생성
BigDecimal bigDecimal1 = new BigDecimal(1.9999999999999999999999999999999999999999999);
// valueOf 메소드를 통한 객체 생성
BigDecimal bigDecimal2 = BigDecimal.valueOf(3.141592);
		
// 반올림 모드
// BigDecimal 끼리 나눗셈 연산을 하게되면 오차가 발생할 수 있기 때문에 반올림모드를 지정한다.
// 반올림 모드는 MathContext 객체를 통해서 진행되는데
// MathContext의 생성자를 통해 객체를 생성할 때 매개변수로
// MathContext(int 자리수, 반올림모드(RoundingMode enum 사용))를 전달한다.
// 자리수는 정수자리까지 포함된 자리수이다.
System.out.println(
		bigDecimal2.divide(bigDecimal1, new MathContext(4, RoundingMode.HALF_UP)) // 1.571
);
		
// setScale : 소수점 자리수 재설정
// setScale(int 소수점 자리수, 반올림모드)
// 현재 소수점 자리수보다 큰 소수점 자리수를 지정하면 뒤에 0이 자동으로 붙는다.(반올림모드 지정하지 않아도된다.)
// 현재 소수점 자리수보다 작은 소수점 자리수를 지정하면 반올림모드가 동작한다.
System.out.println(bigDecimal2.setScale(20)); // 3.14159200000000000000
System.out.println(bigDecimal2.setScale(4, RoundingMode.UP)); // 3.1416
